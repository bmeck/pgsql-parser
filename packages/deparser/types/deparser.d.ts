export default class Deparser {
    static deparse(query: any, opts: any): any;
    constructor(tree: any, opts?: {});
    deparseQuery(): any;
    deparseNodes(nodes: any, context: any): any;
    deparseReturningList(list: any, context: any): any;
    list(nodes: any, separator: string, prefix: string, context: any): any;
    listQuotes(nodes: any, separator?: string): any;
    quote(value: any): any;
    escape(literal: any): string;
    getPgCatalogTypeName(typeName: any, size: any): string;
    type(names: any, args: any): any;
    deparse(item: any, context: any): any;
    ['RawStmt'](node: any, context?: {}): any;
    ['RuleStmt'](node: any, context?: {}): string;
    ['A_Expr'](node: any, context?: {}): string;
    ['Alias'](node: any, context?: {}): string;
    ['A_ArrayExpr'](node: any): string;
    ['A_Const'](node: any, context?: {}): any;
    ['A_Indices'](node: any, context?: {}): string;
    ['A_Indirection'](node: any, context?: {}): string;
    ['A_Star'](node: any): string;
    ['BitString'](node: any): string;
    ['BoolExpr'](node: any, context?: {}): string;
    ['BooleanTest'](node: any, context?: {}): string;
    ['CaseExpr'](node: any, context?: {}): string;
    ['CoalesceExpr'](node: any, context?: {}): string;
    ['CollateClause'](node: any, context?: {}): string;
    ['CompositeTypeStmt'](node: any, context?: {}): string;
    ['RenameStmt'](node: any, context?: {}): string;
    ['AlterOwnerStmt'](node: any, context?: {}): string;
    ['AlterObjectSchemaStmt'](node: any, context?: {}): string;
    ['ColumnDef'](node: any, context?: {}): any;
    ['SQLValueFunction'](node: any): "CURRENT_USER" | "SESSION_USER" | "CURRENT_DATE" | "CURRENT_TIMESTAMP";
    ['ColumnRef'](node: any, context?: {}): any;
    ['CommentStmt'](node: any, context?: {}): string;
    ['CommonTableExpr'](node: any, context?: {}): string;
    ['DefineStmt'](node: any, context?: {}): string;
    ['DefElem'](node: any, context?: {}): any;
    ['DoStmt'](node: any): string;
    ['Float'](node: any): any;
    ['FuncCall'](node: any, context?: {}): string;
    ['GroupingFunc'](node: any, context?: {}): string;
    ['GroupingSet'](node: any, context?: {}): string;
    ['IndexStmt'](node: any, context?: {}): string;
    ['IndexElem'](node: any, context?: {}): any;
    ['InsertStmt'](node: any, context?: {}): string;
    ['SetToDefault'](node: any): string;
    ['MultiAssignRef'](node: any, context?: {}): string;
    ['DeleteStmt'](node: any, context?: {}): string;
    ['UpdateStmt'](node: any, context?: {}): string;
    ['Integer'](node: any, context?: {}): any;
    ['IntoClause'](node: any, context?: {}): string;
    ['JoinExpr'](node: any, context?: {}): string;
    ['LockingClause'](node: any, context?: {}): string;
    ['LockStmt'](node: any, context?: {}): string;
    ['MinMaxExpr'](node: any, context?: {}): string;
    ['NamedArgExpr'](node: any, context?: {}): string;
    ['Null'](node: any): string;
    ['NullTest'](node: any, context?: {}): string;
    ['ParamRef'](node: any): string;
    ['RangeFunction'](node: any, context?: {}): string;
    ['RangeSubselect'](node: any, context?: {}): string;
    ['RangeTableSample'](node: any, context?: {}): string;
    ['RangeVar'](node: any, context?: {}): string;
    ['ResTarget'](node: any, context?: {}): any;
    ['RowExpr'](node: any, context?: {}): string;
    ['ExplainStmt'](node: any, context?: {}): string;
    ['SelectStmt'](node: any, context?: {}): string;
    ['TruncateStmt'](node: any, context?: {}): string;
    ['AlterDefaultPrivilegesStmt'](node: any, context?: {}): string;
    ['AlterTableStmt'](node: any, context?: {}): string;
    ['AlterTableCmd'](node: any, context?: {}): string;
    ['CreateEnumStmt'](node: any, context?: {}): string;
    ['AlterEnumStmt'](node: any, context?: {}): string;
    ['AlterDomainStmt'](node: any, context?: {}): string;
    ['CreateExtensionStmt'](node: any): string;
    ['DropStmt'](node: any, context?: {}): string;
    ['CreatePolicyStmt'](node: any, context?: {}): string;
    ['AlterPolicyStmt'](node: any, context?: {}): string;
    ['ViewStmt'](node: any, context?: {}): string;
    ['CreateSeqStmt'](node: any, context?: {}): string;
    ['AlterSeqStmt'](node: any, context?: {}): string;
    ['CreateTableAsStmt'](node: any, context?: {}): string;
    ['CreateTrigStmt'](node: any, context?: {}): string;
    ['CreateDomainStmt'](node: any, context?: {}): string;
    ['CreateStmt'](node: any, context?: {}): string;
    ['ConstraintStmt'](node: any): string;
    ['ReferenceConstraint'](node: any, context?: {}): string;
    ['ExclusionConstraint'](node: any, context?: {}): string;
    ['Constraint'](node: any, context?: {}): string;
    ['AccessPriv'](node: any): string;
    ['VariableSetStmt'](node: any): string;
    ['VariableShowStmt'](node: any): string;
    ['FuncWithArgs'](node: any, context?: {}): string;
    ['FunctionParameter'](node: any, context?: {}): string;
    ['CreateFunctionStmt'](node: any, context?: {}): string;
    ['CreateSchemaStmt'](node: any): string;
    ['RoleSpec'](node: any): any;
    ['GrantStmt'](node: any): string;
    ['GrantRoleStmt'](node: any, context?: {}): string;
    ['CreateRoleStmt'](node: any, context?: {}): string;
    ['TransactionStmt'](node: any, context?: {}): string;
    ['SortBy'](node: any, context?: {}): string;
    ['ObjectWithArgs'](node: any, context?: {}): string;
    ['String'](node: any): any;
    ['SubLink'](node: any, context?: {}): string;
    ['TypeCast'](node: any, context?: {}): string;
    ['TypeName'](node: any, context?: {}): string;
    ['CaseWhen'](node: any, context?: {}): string;
    ['WindowDef'](node: any, context?: {}): string;
    ['WithClause'](node: any, context?: {}): string;
    ['CopyStmt'](node: any, context?: {}): string;
    ['CallStmt'](node: any, context?: {}): string;
    deparseFrameOptions(options: any, refName: any, startOffset: any, endOffset: any): string;
    deparseInterval(node: any): string;
    interval(mask: any): any;
}
